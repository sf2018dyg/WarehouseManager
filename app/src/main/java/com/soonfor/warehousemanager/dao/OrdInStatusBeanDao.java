package com.soonfor.warehousemanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.soonfor.warehousemanager.module.instore.beans.OrdInStatusBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OrdInStatusBean".
*/
public class OrdInStatusBeanDao extends AbstractDao<OrdInStatusBean, String> {

    public static final String TABLENAME = "OrdInStatusBean";

    /**
     * Properties of entity OrdInStatusBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FOrdNo = new Property(0, String.class, "fOrdNo", true, "fOrdNo");
        public final static Property FProdNo = new Property(1, String.class, "fProdNo", false, "fProdNo");
        public final static Property FTotalPackQty = new Property(2, String.class, "fTotalPackQty", false, "fTotalPackQty");
        public final static Property FSortingPackQty = new Property(3, String.class, "fSortingPackQty", false, "fSortingPackQty");
        public final static Property FStkInPackQty = new Property(4, String.class, "fStkInPackQty", false, "fStkInPackQty");
        public final static Property FScanedPackQty = new Property(5, String.class, "fScanedPackQty", false, "fScanedPackQty");
        public final static Property FThisScanPackQty = new Property(6, String.class, "fThisScanPackQty", false, "fThisScanPackQty");
        public final static Property FUnScanPackQty = new Property(7, String.class, "fUnScanPackQty", false, "fUnScanPackQty");
    }


    public OrdInStatusBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OrdInStatusBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OrdInStatusBean\" (" + //
                "\"fOrdNo\" TEXT PRIMARY KEY NOT NULL ," + // 0: fOrdNo
                "\"fProdNo\" TEXT," + // 1: fProdNo
                "\"fTotalPackQty\" TEXT," + // 2: fTotalPackQty
                "\"fSortingPackQty\" TEXT," + // 3: fSortingPackQty
                "\"fStkInPackQty\" TEXT," + // 4: fStkInPackQty
                "\"fScanedPackQty\" TEXT," + // 5: fScanedPackQty
                "\"fThisScanPackQty\" TEXT," + // 6: fThisScanPackQty
                "\"fUnScanPackQty\" TEXT);"); // 7: fUnScanPackQty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OrdInStatusBean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrdInStatusBean entity) {
        stmt.clearBindings();
 
        String fOrdNo = entity.getFOrdNo();
        if (fOrdNo != null) {
            stmt.bindString(1, fOrdNo);
        }
 
        String fProdNo = entity.getFProdNo();
        if (fProdNo != null) {
            stmt.bindString(2, fProdNo);
        }
 
        String fTotalPackQty = entity.getFTotalPackQty();
        if (fTotalPackQty != null) {
            stmt.bindString(3, fTotalPackQty);
        }
 
        String fSortingPackQty = entity.getFSortingPackQty();
        if (fSortingPackQty != null) {
            stmt.bindString(4, fSortingPackQty);
        }
 
        String fStkInPackQty = entity.getFStkInPackQty();
        if (fStkInPackQty != null) {
            stmt.bindString(5, fStkInPackQty);
        }
 
        String fScanedPackQty = entity.getFScanedPackQty();
        if (fScanedPackQty != null) {
            stmt.bindString(6, fScanedPackQty);
        }
 
        String fThisScanPackQty = entity.getFThisScanPackQty();
        if (fThisScanPackQty != null) {
            stmt.bindString(7, fThisScanPackQty);
        }
 
        String fUnScanPackQty = entity.getFUnScanPackQty();
        if (fUnScanPackQty != null) {
            stmt.bindString(8, fUnScanPackQty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrdInStatusBean entity) {
        stmt.clearBindings();
 
        String fOrdNo = entity.getFOrdNo();
        if (fOrdNo != null) {
            stmt.bindString(1, fOrdNo);
        }
 
        String fProdNo = entity.getFProdNo();
        if (fProdNo != null) {
            stmt.bindString(2, fProdNo);
        }
 
        String fTotalPackQty = entity.getFTotalPackQty();
        if (fTotalPackQty != null) {
            stmt.bindString(3, fTotalPackQty);
        }
 
        String fSortingPackQty = entity.getFSortingPackQty();
        if (fSortingPackQty != null) {
            stmt.bindString(4, fSortingPackQty);
        }
 
        String fStkInPackQty = entity.getFStkInPackQty();
        if (fStkInPackQty != null) {
            stmt.bindString(5, fStkInPackQty);
        }
 
        String fScanedPackQty = entity.getFScanedPackQty();
        if (fScanedPackQty != null) {
            stmt.bindString(6, fScanedPackQty);
        }
 
        String fThisScanPackQty = entity.getFThisScanPackQty();
        if (fThisScanPackQty != null) {
            stmt.bindString(7, fThisScanPackQty);
        }
 
        String fUnScanPackQty = entity.getFUnScanPackQty();
        if (fUnScanPackQty != null) {
            stmt.bindString(8, fUnScanPackQty);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public OrdInStatusBean readEntity(Cursor cursor, int offset) {
        OrdInStatusBean entity = new OrdInStatusBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fOrdNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fProdNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fTotalPackQty
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fSortingPackQty
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fStkInPackQty
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fScanedPackQty
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fThisScanPackQty
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // fUnScanPackQty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrdInStatusBean entity, int offset) {
        entity.setFOrdNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFProdNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFTotalPackQty(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFSortingPackQty(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFStkInPackQty(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFScanedPackQty(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFThisScanPackQty(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFUnScanPackQty(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(OrdInStatusBean entity, long rowId) {
        return entity.getFOrdNo();
    }
    
    @Override
    public String getKey(OrdInStatusBean entity) {
        if(entity != null) {
            return entity.getFOrdNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrdInStatusBean entity) {
        return entity.getFOrdNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
