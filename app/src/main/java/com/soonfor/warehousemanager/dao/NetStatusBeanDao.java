package com.soonfor.warehousemanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.soonfor.warehousemanager.bases.NetStatusBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NetStatusBean".
*/
public class NetStatusBeanDao extends AbstractDao<NetStatusBean, String> {

    public static final String TABLENAME = "NetStatusBean";

    /**
     * Properties of entity NetStatusBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "name");
        public final static Property Yingsao = new Property(1, int.class, "yingsao", false, "yingsao");
        public final static Property Yisao = new Property(2, int.class, "yisao", false, "yisao");
        public final static Property Benci = new Property(3, int.class, "benci", false, "benci");
        public final static Property Weisao = new Property(4, int.class, "weisao", false, "weisao");
    }


    public NetStatusBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NetStatusBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NetStatusBean\" (" + //
                "\"name\" TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "\"yingsao\" INTEGER NOT NULL ," + // 1: yingsao
                "\"yisao\" INTEGER NOT NULL ," + // 2: yisao
                "\"benci\" INTEGER NOT NULL ," + // 3: benci
                "\"weisao\" INTEGER NOT NULL );"); // 4: weisao
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NetStatusBean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NetStatusBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getYingsao());
        stmt.bindLong(3, entity.getYisao());
        stmt.bindLong(4, entity.getBenci());
        stmt.bindLong(5, entity.getWeisao());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NetStatusBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
        stmt.bindLong(2, entity.getYingsao());
        stmt.bindLong(3, entity.getYisao());
        stmt.bindLong(4, entity.getBenci());
        stmt.bindLong(5, entity.getWeisao());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NetStatusBean readEntity(Cursor cursor, int offset) {
        NetStatusBean entity = new NetStatusBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.getInt(offset + 1), // yingsao
            cursor.getInt(offset + 2), // yisao
            cursor.getInt(offset + 3), // benci
            cursor.getInt(offset + 4) // weisao
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NetStatusBean entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setYingsao(cursor.getInt(offset + 1));
        entity.setYisao(cursor.getInt(offset + 2));
        entity.setBenci(cursor.getInt(offset + 3));
        entity.setWeisao(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NetStatusBean entity, long rowId) {
        return entity.getName();
    }
    
    @Override
    public String getKey(NetStatusBean entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NetStatusBean entity) {
        return entity.getName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
