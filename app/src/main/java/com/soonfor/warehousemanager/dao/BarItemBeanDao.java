package com.soonfor.warehousemanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.soonfor.warehousemanager.module.instore.beans.BarItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BarItemBean".
*/
public class BarItemBeanDao extends AbstractDao<BarItemBean, String> {

    public static final String TABLENAME = "BarItemBean";

    /**
     * Properties of entity BarItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FBarCode = new Property(0, String.class, "fBarCode", true, "fBarCode");
        public final static Property FOrdNo = new Property(1, String.class, "fOrdNo", false, "fOrdNo");
        public final static Property FSplitBatchNo = new Property(2, String.class, "fSplitBatchNo", false, "fSplitBatchNo");
        public final static Property FSPCode = new Property(3, String.class, "fSPCode", false, "fSPCode");
        public final static Property FSPSortName = new Property(4, String.class, "fSPSortName", false, "fSPSortName");
        public final static Property FSPSortEnName = new Property(5, String.class, "fSPSortEnName", false, "fSPSortEnName");
        public final static Property FPackMark = new Property(6, String.class, "fPackMark", false, "fPackMark");
        public final static Property FPlaceCode = new Property(7, String.class, "fPlaceCode", false, "fPlaceCode");
        public final static Property FPlaceName = new Property(8, String.class, "fPlaceName", false, "fPlaceName");
        public final static Property FCtnL = new Property(9, String.class, "fCtnL", false, "fCtnL");
        public final static Property FCtnW = new Property(10, String.class, "fCtnW", false, "fCtnW");
        public final static Property FCtnH = new Property(11, String.class, "fCtnH", false, "fCtnH");
        public final static Property FPrNTimes = new Property(12, String.class, "fPrNTimes", false, "fPrNTimes");
        public final static Property FIfCancel = new Property(13, String.class, "fIfCancel", false, "fIfCancel");
        public final static Property FPerPrnTimes = new Property(14, String.class, "fPerPrnTimes", false, "fPerPrnTimes");
        public final static Property FPackNo = new Property(15, String.class, "fPackNo", false, "fPackNo");
        public final static Property FProdNo = new Property(16, String.class, "fProdNo", false, "fProdNo");
        public final static Property FPackCuft = new Property(17, String.class, "fPackCuft", false, "fPackCuft");
        public final static Property FPackPcs = new Property(18, String.class, "fPackPcs", false, "fPackPcs");
        public final static Property FPackCtn = new Property(19, String.class, "fPackCtn", false, "fPackCtn");
        public final static Property FScanorID = new Property(20, String.class, "fScanorID", false, "fScanorID");
        public final static Property FScanor = new Property(21, String.class, "fScanor", false, "fScanor");
        public final static Property FScanDate = new Property(22, String.class, "fScanDate", false, "fScanDate");
        public final static Property FID = new Property(23, String.class, "fID", false, "fID");
        public final static Property FStkInLogNo = new Property(24, String.class, "fStkInLogNo", false, "fStkInLogNo");
    }


    public BarItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BarItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BarItemBean\" (" + //
                "\"fBarCode\" TEXT PRIMARY KEY NOT NULL ," + // 0: fBarCode
                "\"fOrdNo\" TEXT," + // 1: fOrdNo
                "\"fSplitBatchNo\" TEXT," + // 2: fSplitBatchNo
                "\"fSPCode\" TEXT," + // 3: fSPCode
                "\"fSPSortName\" TEXT," + // 4: fSPSortName
                "\"fSPSortEnName\" TEXT," + // 5: fSPSortEnName
                "\"fPackMark\" TEXT," + // 6: fPackMark
                "\"fPlaceCode\" TEXT," + // 7: fPlaceCode
                "\"fPlaceName\" TEXT," + // 8: fPlaceName
                "\"fCtnL\" TEXT," + // 9: fCtnL
                "\"fCtnW\" TEXT," + // 10: fCtnW
                "\"fCtnH\" TEXT," + // 11: fCtnH
                "\"fPrNTimes\" TEXT," + // 12: fPrNTimes
                "\"fIfCancel\" TEXT," + // 13: fIfCancel
                "\"fPerPrnTimes\" TEXT," + // 14: fPerPrnTimes
                "\"fPackNo\" TEXT," + // 15: fPackNo
                "\"fProdNo\" TEXT," + // 16: fProdNo
                "\"fPackCuft\" TEXT," + // 17: fPackCuft
                "\"fPackPcs\" TEXT," + // 18: fPackPcs
                "\"fPackCtn\" TEXT," + // 19: fPackCtn
                "\"fScanorID\" TEXT," + // 20: fScanorID
                "\"fScanor\" TEXT," + // 21: fScanor
                "\"fScanDate\" TEXT," + // 22: fScanDate
                "\"fID\" TEXT," + // 23: fID
                "\"fStkInLogNo\" TEXT);"); // 24: fStkInLogNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BarItemBean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BarItemBean entity) {
        stmt.clearBindings();
 
        String fBarCode = entity.getFBarCode();
        if (fBarCode != null) {
            stmt.bindString(1, fBarCode);
        }
 
        String fOrdNo = entity.getFOrdNo();
        if (fOrdNo != null) {
            stmt.bindString(2, fOrdNo);
        }
 
        String fSplitBatchNo = entity.getFSplitBatchNo();
        if (fSplitBatchNo != null) {
            stmt.bindString(3, fSplitBatchNo);
        }
 
        String fSPCode = entity.getFSPCode();
        if (fSPCode != null) {
            stmt.bindString(4, fSPCode);
        }
 
        String fSPSortName = entity.getFSPSortName();
        if (fSPSortName != null) {
            stmt.bindString(5, fSPSortName);
        }
 
        String fSPSortEnName = entity.getFSPSortEnName();
        if (fSPSortEnName != null) {
            stmt.bindString(6, fSPSortEnName);
        }
 
        String fPackMark = entity.getFPackMark();
        if (fPackMark != null) {
            stmt.bindString(7, fPackMark);
        }
 
        String fPlaceCode = entity.getFPlaceCode();
        if (fPlaceCode != null) {
            stmt.bindString(8, fPlaceCode);
        }
 
        String fPlaceName = entity.getFPlaceName();
        if (fPlaceName != null) {
            stmt.bindString(9, fPlaceName);
        }
 
        String fCtnL = entity.getFCtnL();
        if (fCtnL != null) {
            stmt.bindString(10, fCtnL);
        }
 
        String fCtnW = entity.getFCtnW();
        if (fCtnW != null) {
            stmt.bindString(11, fCtnW);
        }
 
        String fCtnH = entity.getFCtnH();
        if (fCtnH != null) {
            stmt.bindString(12, fCtnH);
        }
 
        String fPrNTimes = entity.getFPrNTimes();
        if (fPrNTimes != null) {
            stmt.bindString(13, fPrNTimes);
        }
 
        String fIfCancel = entity.getFIfCancel();
        if (fIfCancel != null) {
            stmt.bindString(14, fIfCancel);
        }
 
        String fPerPrnTimes = entity.getFPerPrnTimes();
        if (fPerPrnTimes != null) {
            stmt.bindString(15, fPerPrnTimes);
        }
 
        String fPackNo = entity.getFPackNo();
        if (fPackNo != null) {
            stmt.bindString(16, fPackNo);
        }
 
        String fProdNo = entity.getFProdNo();
        if (fProdNo != null) {
            stmt.bindString(17, fProdNo);
        }
 
        String fPackCuft = entity.getFPackCuft();
        if (fPackCuft != null) {
            stmt.bindString(18, fPackCuft);
        }
 
        String fPackPcs = entity.getFPackPcs();
        if (fPackPcs != null) {
            stmt.bindString(19, fPackPcs);
        }
 
        String fPackCtn = entity.getFPackCtn();
        if (fPackCtn != null) {
            stmt.bindString(20, fPackCtn);
        }
 
        String fScanorID = entity.getFScanorID();
        if (fScanorID != null) {
            stmt.bindString(21, fScanorID);
        }
 
        String fScanor = entity.getFScanor();
        if (fScanor != null) {
            stmt.bindString(22, fScanor);
        }
 
        String fScanDate = entity.getFScanDate();
        if (fScanDate != null) {
            stmt.bindString(23, fScanDate);
        }
 
        String fID = entity.getFID();
        if (fID != null) {
            stmt.bindString(24, fID);
        }
 
        String fStkInLogNo = entity.getFStkInLogNo();
        if (fStkInLogNo != null) {
            stmt.bindString(25, fStkInLogNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BarItemBean entity) {
        stmt.clearBindings();
 
        String fBarCode = entity.getFBarCode();
        if (fBarCode != null) {
            stmt.bindString(1, fBarCode);
        }
 
        String fOrdNo = entity.getFOrdNo();
        if (fOrdNo != null) {
            stmt.bindString(2, fOrdNo);
        }
 
        String fSplitBatchNo = entity.getFSplitBatchNo();
        if (fSplitBatchNo != null) {
            stmt.bindString(3, fSplitBatchNo);
        }
 
        String fSPCode = entity.getFSPCode();
        if (fSPCode != null) {
            stmt.bindString(4, fSPCode);
        }
 
        String fSPSortName = entity.getFSPSortName();
        if (fSPSortName != null) {
            stmt.bindString(5, fSPSortName);
        }
 
        String fSPSortEnName = entity.getFSPSortEnName();
        if (fSPSortEnName != null) {
            stmt.bindString(6, fSPSortEnName);
        }
 
        String fPackMark = entity.getFPackMark();
        if (fPackMark != null) {
            stmt.bindString(7, fPackMark);
        }
 
        String fPlaceCode = entity.getFPlaceCode();
        if (fPlaceCode != null) {
            stmt.bindString(8, fPlaceCode);
        }
 
        String fPlaceName = entity.getFPlaceName();
        if (fPlaceName != null) {
            stmt.bindString(9, fPlaceName);
        }
 
        String fCtnL = entity.getFCtnL();
        if (fCtnL != null) {
            stmt.bindString(10, fCtnL);
        }
 
        String fCtnW = entity.getFCtnW();
        if (fCtnW != null) {
            stmt.bindString(11, fCtnW);
        }
 
        String fCtnH = entity.getFCtnH();
        if (fCtnH != null) {
            stmt.bindString(12, fCtnH);
        }
 
        String fPrNTimes = entity.getFPrNTimes();
        if (fPrNTimes != null) {
            stmt.bindString(13, fPrNTimes);
        }
 
        String fIfCancel = entity.getFIfCancel();
        if (fIfCancel != null) {
            stmt.bindString(14, fIfCancel);
        }
 
        String fPerPrnTimes = entity.getFPerPrnTimes();
        if (fPerPrnTimes != null) {
            stmt.bindString(15, fPerPrnTimes);
        }
 
        String fPackNo = entity.getFPackNo();
        if (fPackNo != null) {
            stmt.bindString(16, fPackNo);
        }
 
        String fProdNo = entity.getFProdNo();
        if (fProdNo != null) {
            stmt.bindString(17, fProdNo);
        }
 
        String fPackCuft = entity.getFPackCuft();
        if (fPackCuft != null) {
            stmt.bindString(18, fPackCuft);
        }
 
        String fPackPcs = entity.getFPackPcs();
        if (fPackPcs != null) {
            stmt.bindString(19, fPackPcs);
        }
 
        String fPackCtn = entity.getFPackCtn();
        if (fPackCtn != null) {
            stmt.bindString(20, fPackCtn);
        }
 
        String fScanorID = entity.getFScanorID();
        if (fScanorID != null) {
            stmt.bindString(21, fScanorID);
        }
 
        String fScanor = entity.getFScanor();
        if (fScanor != null) {
            stmt.bindString(22, fScanor);
        }
 
        String fScanDate = entity.getFScanDate();
        if (fScanDate != null) {
            stmt.bindString(23, fScanDate);
        }
 
        String fID = entity.getFID();
        if (fID != null) {
            stmt.bindString(24, fID);
        }
 
        String fStkInLogNo = entity.getFStkInLogNo();
        if (fStkInLogNo != null) {
            stmt.bindString(25, fStkInLogNo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BarItemBean readEntity(Cursor cursor, int offset) {
        BarItemBean entity = new BarItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fBarCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fOrdNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fSplitBatchNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fSPCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fSPSortName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fSPSortEnName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fPackMark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fPlaceCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fPlaceName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fCtnL
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fCtnW
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fCtnH
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fPrNTimes
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fIfCancel
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fPerPrnTimes
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // fPackNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // fProdNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // fPackCuft
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // fPackPcs
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // fPackCtn
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // fScanorID
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // fScanor
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // fScanDate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // fID
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // fStkInLogNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BarItemBean entity, int offset) {
        entity.setFBarCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFOrdNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFSplitBatchNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFSPCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFSPSortName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFSPSortEnName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFPackMark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFPlaceCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFPlaceName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFCtnL(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFCtnW(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFCtnH(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFPrNTimes(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFIfCancel(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFPerPrnTimes(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFPackNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFProdNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFPackCuft(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFPackPcs(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFPackCtn(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFScanorID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFScanor(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFScanDate(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFID(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setFStkInLogNo(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BarItemBean entity, long rowId) {
        return entity.getFBarCode();
    }
    
    @Override
    public String getKey(BarItemBean entity) {
        if(entity != null) {
            return entity.getFBarCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BarItemBean entity) {
        return entity.getFBarCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
