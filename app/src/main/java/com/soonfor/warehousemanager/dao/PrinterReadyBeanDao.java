package com.soonfor.warehousemanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.soonfor.warehousemanager.module.print.bean.PrinterReadyBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PrinterReadyBean".
*/
public class PrinterReadyBeanDao extends AbstractDao<PrinterReadyBean, Long> {

    public static final String TABLENAME = "PrinterReadyBean";

    /**
     * Properties of entity PrinterReadyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FBarCode = new Property(1, String.class, "fBarCode", false, "fBarCode");
        public final static Property FOrdNo = new Property(2, String.class, "fOrdNo", false, "fOrdNo");
        public final static Property FSPCode = new Property(3, String.class, "fSPCode", false, "fSPCode");
        public final static Property FSPName = new Property(4, String.class, "fSPName", false, "fSPName");
        public final static Property HeBaoTime = new Property(5, String.class, "HeBaoTime", false, "HeBaoTime");
        public final static Property HeBaoUser = new Property(6, String.class, "HeBaoUser", false, "HeBaoUser");
    }


    public PrinterReadyBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PrinterReadyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PrinterReadyBean\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"fBarCode\" TEXT," + // 1: fBarCode
                "\"fOrdNo\" TEXT," + // 2: fOrdNo
                "\"fSPCode\" TEXT," + // 3: fSPCode
                "\"fSPName\" TEXT," + // 4: fSPName
                "\"HeBaoTime\" TEXT," + // 5: HeBaoTime
                "\"HeBaoUser\" TEXT);"); // 6: HeBaoUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PrinterReadyBean\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrinterReadyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fBarCode = entity.getFBarCode();
        if (fBarCode != null) {
            stmt.bindString(2, fBarCode);
        }
 
        String fOrdNo = entity.getFOrdNo();
        if (fOrdNo != null) {
            stmt.bindString(3, fOrdNo);
        }
 
        String fSPCode = entity.getFSPCode();
        if (fSPCode != null) {
            stmt.bindString(4, fSPCode);
        }
 
        String fSPName = entity.getFSPName();
        if (fSPName != null) {
            stmt.bindString(5, fSPName);
        }
 
        String HeBaoTime = entity.getHeBaoTime();
        if (HeBaoTime != null) {
            stmt.bindString(6, HeBaoTime);
        }
 
        String HeBaoUser = entity.getHeBaoUser();
        if (HeBaoUser != null) {
            stmt.bindString(7, HeBaoUser);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrinterReadyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fBarCode = entity.getFBarCode();
        if (fBarCode != null) {
            stmt.bindString(2, fBarCode);
        }
 
        String fOrdNo = entity.getFOrdNo();
        if (fOrdNo != null) {
            stmt.bindString(3, fOrdNo);
        }
 
        String fSPCode = entity.getFSPCode();
        if (fSPCode != null) {
            stmt.bindString(4, fSPCode);
        }
 
        String fSPName = entity.getFSPName();
        if (fSPName != null) {
            stmt.bindString(5, fSPName);
        }
 
        String HeBaoTime = entity.getHeBaoTime();
        if (HeBaoTime != null) {
            stmt.bindString(6, HeBaoTime);
        }
 
        String HeBaoUser = entity.getHeBaoUser();
        if (HeBaoUser != null) {
            stmt.bindString(7, HeBaoUser);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PrinterReadyBean readEntity(Cursor cursor, int offset) {
        PrinterReadyBean entity = new PrinterReadyBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fBarCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fOrdNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fSPCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fSPName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // HeBaoTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // HeBaoUser
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrinterReadyBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFBarCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFOrdNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFSPCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFSPName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeBaoTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeBaoUser(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PrinterReadyBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PrinterReadyBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrinterReadyBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
